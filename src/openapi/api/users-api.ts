/* tslint:disable */
/* eslint-disable */
/**
 * Cronuseo
 * This is the cronuseo backend APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { User } from '../types';
// @ts-ignore
import { UserCreationRequestBody } from '../types';
// @ts-ignore
import { UserEntity } from '../types';
// @ts-ignore
import { UserPatchRequestBody } from '../types';
// @ts-ignore
import { UserUpdateRequestBody } from '../types';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API create new user. <br>   <b>Permission required:</b> <br>       * users:create <br> 
         * @summary Add a new user
         * @param {string} orgId ID of organization
         * @param {UserCreationRequestBody} userCreationRequestBody User createion request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (orgId: string, userCreationRequestBody: UserCreationRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('addUser', 'orgId', orgId)
            // verify required parameter 'userCreationRequestBody' is not null or undefined
            assertParamExists('addUser', 'userCreationRequestBody', userCreationRequestBody)
            const localVarPath = `/o/{org_id}/users:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreationRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API delete user by id. <br>   <b>Permission required:</b> <br>       * users:delete <br> 
         * @summary Deletes a user
         * @param {string} orgId ID of organization
         * @param {string} id User id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteUser', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/o/{org_id}/users/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch user by id. <br>   <b>Permission required:</b> <br>       * users:read <br> 
         * @summary Find user by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUserById', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/o/{org_id}/users/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch all users. <br>   <b>Permission required:</b> <br>       * users:read_all <br> 
         * @summary Get all users.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getUsers', 'orgId', orgId)
            const localVarPath = `/o/{org_id}/users:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API patch existing user groups and roles. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Patch a existing user
         * @param {string} orgId ID of user
         * @param {string} id ID of user
         * @param {UserPatchRequestBody} userPatchRequestBody User patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUser: async (orgId: string, id: string, userPatchRequestBody: UserPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('patchUser', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchUser', 'id', id)
            // verify required parameter 'userPatchRequestBody' is not null or undefined
            assertParamExists('patchUser', 'userPatchRequestBody', userPatchRequestBody)
            const localVarPath = `/o/{org_id}/users/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API update existing user. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Update a existing user
         * @param {string} orgId ID of organization
         * @param {string} id ID of user
         * @param {UserUpdateRequestBody} userUpdateRequestBody User update request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (orgId: string, id: string, userUpdateRequestBody: UserUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateUser', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userUpdateRequestBody' is not null or undefined
            assertParamExists('updateUser', 'userUpdateRequestBody', userUpdateRequestBody)
            const localVarPath = `/o/{org_id}/users/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * This API create new user. <br>   <b>Permission required:</b> <br>       * users:create <br> 
         * @summary Add a new user
         * @param {string} orgId ID of organization
         * @param {UserCreationRequestBody} userCreationRequestBody User createion request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(orgId: string, userCreationRequestBody: UserCreationRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(orgId, userCreationRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.addUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API delete user by id. <br>   <b>Permission required:</b> <br>       * users:delete <br> 
         * @summary Deletes a user
         * @param {string} orgId ID of organization
         * @param {string} id User id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.deleteUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch user by id. <br>   <b>Permission required:</b> <br>       * users:read <br> 
         * @summary Find user by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getUserById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch all users. <br>   <b>Permission required:</b> <br>       * users:read_all <br> 
         * @summary Get all users.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(orgId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API patch existing user groups and roles. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Patch a existing user
         * @param {string} orgId ID of user
         * @param {string} id ID of user
         * @param {UserPatchRequestBody} userPatchRequestBody User patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUser(orgId: string, id: string, userPatchRequestBody: UserPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUser(orgId, id, userPatchRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.patchUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API update existing user. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Update a existing user
         * @param {string} orgId ID of organization
         * @param {string} id ID of user
         * @param {UserUpdateRequestBody} userUpdateRequestBody User update request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(orgId: string, id: string, userUpdateRequestBody: UserUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(orgId, id, userUpdateRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.updateUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * This API create new user. <br>   <b>Permission required:</b> <br>       * users:create <br> 
         * @summary Add a new user
         * @param {UsersApiAddUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(requestParameters: UsersApiAddUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addUser(requestParameters.orgId, requestParameters.userCreationRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API delete user by id. <br>   <b>Permission required:</b> <br>       * users:delete <br> 
         * @summary Deletes a user
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUser(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch user by id. <br>   <b>Permission required:</b> <br>       * users:read <br> 
         * @summary Find user by ID
         * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig): AxiosPromise<UserEntity> {
            return localVarFp.getUserById(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch all users. <br>   <b>Permission required:</b> <br>       * users:read_all <br> 
         * @summary Get all users.
         * @param {UsersApiGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(requestParameters: UsersApiGetUsersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API patch existing user groups and roles. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Patch a existing user
         * @param {UsersApiPatchUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUser(requestParameters: UsersApiPatchUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchUser(requestParameters.orgId, requestParameters.id, requestParameters.userPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API update existing user. <br>   <b>Permission required:</b> <br>       * users:update <br> 
         * @summary Update a existing user
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUser(requestParameters.orgId, requestParameters.id, requestParameters.userUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUser operation in UsersApi.
 * @export
 * @interface UsersApiAddUserRequest
 */
export interface UsersApiAddUserRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof UsersApiAddUser
     */
    readonly orgId: string

    /**
     * User createion request body
     * @type {UserCreationRequestBody}
     * @memberof UsersApiAddUser
     */
    readonly userCreationRequestBody: UserCreationRequestBody
}

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly orgId: string

    /**
     * User id to delete
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly id: string
}

/**
 * Request parameters for getUserById operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdRequest
 */
export interface UsersApiGetUserByIdRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof UsersApiGetUserById
     */
    readonly orgId: string

    /**
     * ID of user to return
     * @type {string}
     * @memberof UsersApiGetUserById
     */
    readonly id: string
}

/**
 * Request parameters for getUsers operation in UsersApi.
 * @export
 * @interface UsersApiGetUsersRequest
 */
export interface UsersApiGetUsersRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof UsersApiGetUsers
     */
    readonly orgId: string
}

/**
 * Request parameters for patchUser operation in UsersApi.
 * @export
 * @interface UsersApiPatchUserRequest
 */
export interface UsersApiPatchUserRequest {
    /**
     * ID of user
     * @type {string}
     * @memberof UsersApiPatchUser
     */
    readonly orgId: string

    /**
     * ID of user
     * @type {string}
     * @memberof UsersApiPatchUser
     */
    readonly id: string

    /**
     * User patch request body
     * @type {UserPatchRequestBody}
     * @memberof UsersApiPatchUser
     */
    readonly userPatchRequestBody: UserPatchRequestBody
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly orgId: string

    /**
     * ID of user
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly id: string

    /**
     * User update request body
     * @type {UserUpdateRequestBody}
     * @memberof UsersApiUpdateUser
     */
    readonly userUpdateRequestBody: UserUpdateRequestBody
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * This API create new user. <br>   <b>Permission required:</b> <br>       * users:create <br> 
     * @summary Add a new user
     * @param {UsersApiAddUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public addUser(requestParameters: UsersApiAddUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).addUser(requestParameters.orgId, requestParameters.userCreationRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API delete user by id. <br>   <b>Permission required:</b> <br>       * users:delete <br> 
     * @summary Deletes a user
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch user by id. <br>   <b>Permission required:</b> <br>       * users:read <br> 
     * @summary Find user by ID
     * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch all users. <br>   <b>Permission required:</b> <br>       * users:read_all <br> 
     * @summary Get all users.
     * @param {UsersApiGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(requestParameters: UsersApiGetUsersRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API patch existing user groups and roles. <br>   <b>Permission required:</b> <br>       * users:update <br> 
     * @summary Patch a existing user
     * @param {UsersApiPatchUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public patchUser(requestParameters: UsersApiPatchUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).patchUser(requestParameters.orgId, requestParameters.id, requestParameters.userPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API update existing user. <br>   <b>Permission required:</b> <br>       * users:update <br> 
     * @summary Update a existing user
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.orgId, requestParameters.id, requestParameters.userUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

