/* tslint:disable */
/* eslint-disable */
/**
 * Cronuseo
 * This is the cronuseo backend APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Organization } from '../types';
// @ts-ignore
import { OrganizationCreationRequestBody } from '../types';
// @ts-ignore
import { OrganizationEntity } from '../types';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API create new organization. <br>   <b>Permission required:</b> <br>       * orgs:create <br> 
         * @summary Add a new organization
         * @param {OrganizationCreationRequestBody} organizationCreationRequestBody Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrg: async (organizationCreationRequestBody: OrganizationCreationRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreationRequestBody' is not null or undefined
            assertParamExists('addOrg', 'organizationCreationRequestBody', organizationCreationRequestBody)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreationRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API delete organization by id. <br>   <b>Permission required:</b> <br>       * orgs:delete <br> 
         * @summary Deletes a organization
         * @param {string} id Organization id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrg', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch organization by id. <br>   <b>Permission required:</b> <br>       * orgs:read <br> 
         * @summary Find organization by ID
         * @param {string} id ID of organization to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrgById', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch all organizations. <br>   <b>Permission required:</b> <br>       * orgs:read_all <br> 
         * @summary Get all organizations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API regenerate api key of organization. <br>   <b>Permission required:</b> <br>       * orgs:update <br> 
         * @summary Regenerate organization API key
         * @param {string} id Organization id to regenerate key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateOrgKey: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('regenerateOrgKey', 'id', id)
            const localVarPath = `/organizations/{id}/regenerate-key`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API create new organization. <br>   <b>Permission required:</b> <br>       * orgs:create <br> 
         * @summary Add a new organization
         * @param {OrganizationCreationRequestBody} organizationCreationRequestBody Organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrg(organizationCreationRequestBody: OrganizationCreationRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrg(organizationCreationRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.addOrg']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API delete organization by id. <br>   <b>Permission required:</b> <br>       * orgs:delete <br> 
         * @summary Deletes a organization
         * @param {string} id Organization id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrg(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrg(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.deleteOrg']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch organization by id. <br>   <b>Permission required:</b> <br>       * orgs:read <br> 
         * @summary Find organization by ID
         * @param {string} id ID of organization to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.getOrgById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch all organizations. <br>   <b>Permission required:</b> <br>       * orgs:read_all <br> 
         * @summary Get all organizations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgs(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.getOrgs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API regenerate api key of organization. <br>   <b>Permission required:</b> <br>       * orgs:update <br> 
         * @summary Regenerate organization API key
         * @param {string} id Organization id to regenerate key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regenerateOrgKey(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateOrgKey(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['OrganizationsApi.regenerateOrgKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * This API create new organization. <br>   <b>Permission required:</b> <br>       * orgs:create <br> 
         * @summary Add a new organization
         * @param {OrganizationsApiAddOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrg(requestParameters: OrganizationsApiAddOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addOrg(requestParameters.organizationCreationRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API delete organization by id. <br>   <b>Permission required:</b> <br>       * orgs:delete <br> 
         * @summary Deletes a organization
         * @param {OrganizationsApiDeleteOrgRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrg(requestParameters: OrganizationsApiDeleteOrgRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrg(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch organization by id. <br>   <b>Permission required:</b> <br>       * orgs:read <br> 
         * @summary Find organization by ID
         * @param {OrganizationsApiGetOrgByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgById(requestParameters: OrganizationsApiGetOrgByIdRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationEntity> {
            return localVarFp.getOrgById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch all organizations. <br>   <b>Permission required:</b> <br>       * orgs:read_all <br> 
         * @summary Get all organizations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgs(options?: AxiosRequestConfig): AxiosPromise<Array<Organization>> {
            return localVarFp.getOrgs(options).then((request) => request(axios, basePath));
        },
        /**
         * This API regenerate api key of organization. <br>   <b>Permission required:</b> <br>       * orgs:update <br> 
         * @summary Regenerate organization API key
         * @param {OrganizationsApiRegenerateOrgKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regenerateOrgKey(requestParameters: OrganizationsApiRegenerateOrgKeyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.regenerateOrgKey(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrg operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiAddOrgRequest
 */
export interface OrganizationsApiAddOrgRequest {
    /**
     * Organization
     * @type {OrganizationCreationRequestBody}
     * @memberof OrganizationsApiAddOrg
     */
    readonly organizationCreationRequestBody: OrganizationCreationRequestBody
}

/**
 * Request parameters for deleteOrg operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiDeleteOrgRequest
 */
export interface OrganizationsApiDeleteOrgRequest {
    /**
     * Organization id to delete
     * @type {string}
     * @memberof OrganizationsApiDeleteOrg
     */
    readonly id: string
}

/**
 * Request parameters for getOrgById operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiGetOrgByIdRequest
 */
export interface OrganizationsApiGetOrgByIdRequest {
    /**
     * ID of organization to return
     * @type {string}
     * @memberof OrganizationsApiGetOrgById
     */
    readonly id: string
}

/**
 * Request parameters for regenerateOrgKey operation in OrganizationsApi.
 * @export
 * @interface OrganizationsApiRegenerateOrgKeyRequest
 */
export interface OrganizationsApiRegenerateOrgKeyRequest {
    /**
     * Organization id to regenerate key
     * @type {string}
     * @memberof OrganizationsApiRegenerateOrgKey
     */
    readonly id: string
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * This API create new organization. <br>   <b>Permission required:</b> <br>       * orgs:create <br> 
     * @summary Add a new organization
     * @param {OrganizationsApiAddOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public addOrg(requestParameters: OrganizationsApiAddOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).addOrg(requestParameters.organizationCreationRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API delete organization by id. <br>   <b>Permission required:</b> <br>       * orgs:delete <br> 
     * @summary Deletes a organization
     * @param {OrganizationsApiDeleteOrgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public deleteOrg(requestParameters: OrganizationsApiDeleteOrgRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).deleteOrg(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch organization by id. <br>   <b>Permission required:</b> <br>       * orgs:read <br> 
     * @summary Find organization by ID
     * @param {OrganizationsApiGetOrgByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrgById(requestParameters: OrganizationsApiGetOrgByIdRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrgById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch all organizations. <br>   <b>Permission required:</b> <br>       * orgs:read_all <br> 
     * @summary Get all organizations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrgs(options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrgs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API regenerate api key of organization. <br>   <b>Permission required:</b> <br>       * orgs:update <br> 
     * @summary Regenerate organization API key
     * @param {OrganizationsApiRegenerateOrgKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public regenerateOrgKey(requestParameters: OrganizationsApiRegenerateOrgKeyRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).regenerateOrgKey(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

