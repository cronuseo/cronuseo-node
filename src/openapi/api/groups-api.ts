/* tslint:disable */
/* eslint-disable */
/**
 * Cronuseo
 * This is the cronuseo backend APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Group } from '../types';
// @ts-ignore
import { GroupCreationRequestBody } from '../types';
// @ts-ignore
import { GroupEntity } from '../types';
// @ts-ignore
import { GroupPatchRequestBody } from '../types';
// @ts-ignore
import { GroupUpdateRequestBody } from '../types';
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API create new group. <br>   <b>Permission required:</b> <br>       * groups:create <br> 
         * @summary Add a new group
         * @param {string} orgId ID of organization
         * @param {GroupCreationRequestBody} groupCreationRequestBody Group creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addgroup: async (orgId: string, groupCreationRequestBody: GroupCreationRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('addgroup', 'orgId', orgId)
            // verify required parameter 'groupCreationRequestBody' is not null or undefined
            assertParamExists('addgroup', 'groupCreationRequestBody', groupCreationRequestBody)
            const localVarPath = `/o/{org_id}/groups:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupCreationRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API delete group by id. <br>   <b>Permission required:</b> <br>       * groups:delete <br> 
         * @summary Deletes a group
         * @param {string} orgId ID of organization
         * @param {string} id Group id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deleteGroup', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGroup', 'id', id)
            const localVarPath = `/o/{org_id}/groups/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch group by id. <br>   <b>Permission required:</b> <br>       * groups:read <br> 
         * @summary Find group by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of group to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getGroupById', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGroupById', 'id', id)
            const localVarPath = `/o/{org_id}/groups/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch all groups. <br>   <b>Permission required:</b> <br>       * groups:read_all <br> 
         * @summary Get all groups.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getGroups', 'orgId', orgId)
            const localVarPath = `/o/{org_id}/groups:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API patch existing group roles and users. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Patch a existing group
         * @param {string} orgId ID of organization
         * @param {string} id ID of group
         * @param {GroupPatchRequestBody} groupPatchRequestBody Group patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGroup: async (orgId: string, id: string, groupPatchRequestBody: GroupPatchRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('patchGroup', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchGroup', 'id', id)
            // verify required parameter 'groupPatchRequestBody' is not null or undefined
            assertParamExists('patchGroup', 'groupPatchRequestBody', groupPatchRequestBody)
            const localVarPath = `/o/{org_id}/groups/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupPatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API update existing group. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Update a existing group
         * @param {string} orgId ID of organization
         * @param {string} id ID of group
         * @param {GroupUpdateRequestBody} groupUpdateRequestBody Group patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (orgId: string, id: string, groupUpdateRequestBody: GroupUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('updateGroup', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateGroup', 'id', id)
            // verify required parameter 'groupUpdateRequestBody' is not null or undefined
            assertParamExists('updateGroup', 'groupUpdateRequestBody', groupUpdateRequestBody)
            const localVarPath = `/o/{org_id}/groups/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * This API create new group. <br>   <b>Permission required:</b> <br>       * groups:create <br> 
         * @summary Add a new group
         * @param {string} orgId ID of organization
         * @param {GroupCreationRequestBody} groupCreationRequestBody Group creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addgroup(orgId: string, groupCreationRequestBody: GroupCreationRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addgroup(orgId, groupCreationRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.addgroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API delete group by id. <br>   <b>Permission required:</b> <br>       * groups:delete <br> 
         * @summary Deletes a group
         * @param {string} orgId ID of organization
         * @param {string} id Group id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.deleteGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch group by id. <br>   <b>Permission required:</b> <br>       * groups:read <br> 
         * @summary Find group by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of group to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupById(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupById(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.getGroupById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch all groups. <br>   <b>Permission required:</b> <br>       * groups:read_all <br> 
         * @summary Get all groups.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(orgId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.getGroups']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API patch existing group roles and users. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Patch a existing group
         * @param {string} orgId ID of organization
         * @param {string} id ID of group
         * @param {GroupPatchRequestBody} groupPatchRequestBody Group patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchGroup(orgId: string, id: string, groupPatchRequestBody: GroupPatchRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchGroup(orgId, id, groupPatchRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.patchGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API update existing group. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Update a existing group
         * @param {string} orgId ID of organization
         * @param {string} id ID of group
         * @param {GroupUpdateRequestBody} groupUpdateRequestBody Group patch request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(orgId: string, id: string, groupUpdateRequestBody: GroupUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(orgId, id, groupUpdateRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GroupsApi.updateGroup']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * This API create new group. <br>   <b>Permission required:</b> <br>       * groups:create <br> 
         * @summary Add a new group
         * @param {GroupsApiAddgroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addgroup(requestParameters: GroupsApiAddgroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addgroup(requestParameters.orgId, requestParameters.groupCreationRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API delete group by id. <br>   <b>Permission required:</b> <br>       * groups:delete <br> 
         * @summary Deletes a group
         * @param {GroupsApiDeleteGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(requestParameters: GroupsApiDeleteGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteGroup(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch group by id. <br>   <b>Permission required:</b> <br>       * groups:read <br> 
         * @summary Find group by ID
         * @param {GroupsApiGetGroupByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupById(requestParameters: GroupsApiGetGroupByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GroupEntity> {
            return localVarFp.getGroupById(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch all groups. <br>   <b>Permission required:</b> <br>       * groups:read_all <br> 
         * @summary Get all groups.
         * @param {GroupsApiGetGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(requestParameters: GroupsApiGetGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Group>> {
            return localVarFp.getGroups(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API patch existing group roles and users. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Patch a existing group
         * @param {GroupsApiPatchGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchGroup(requestParameters: GroupsApiPatchGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchGroup(requestParameters.orgId, requestParameters.id, requestParameters.groupPatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API update existing group. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
         * @summary Update a existing group
         * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateGroup(requestParameters.orgId, requestParameters.id, requestParameters.groupUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addgroup operation in GroupsApi.
 * @export
 * @interface GroupsApiAddgroupRequest
 */
export interface GroupsApiAddgroupRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiAddgroup
     */
    readonly orgId: string

    /**
     * Group creation request body
     * @type {GroupCreationRequestBody}
     * @memberof GroupsApiAddgroup
     */
    readonly groupCreationRequestBody: GroupCreationRequestBody
}

/**
 * Request parameters for deleteGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiDeleteGroupRequest
 */
export interface GroupsApiDeleteGroupRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    readonly orgId: string

    /**
     * Group id to delete
     * @type {string}
     * @memberof GroupsApiDeleteGroup
     */
    readonly id: string
}

/**
 * Request parameters for getGroupById operation in GroupsApi.
 * @export
 * @interface GroupsApiGetGroupByIdRequest
 */
export interface GroupsApiGetGroupByIdRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiGetGroupById
     */
    readonly orgId: string

    /**
     * ID of group to return
     * @type {string}
     * @memberof GroupsApiGetGroupById
     */
    readonly id: string
}

/**
 * Request parameters for getGroups operation in GroupsApi.
 * @export
 * @interface GroupsApiGetGroupsRequest
 */
export interface GroupsApiGetGroupsRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiGetGroups
     */
    readonly orgId: string
}

/**
 * Request parameters for patchGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiPatchGroupRequest
 */
export interface GroupsApiPatchGroupRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiPatchGroup
     */
    readonly orgId: string

    /**
     * ID of group
     * @type {string}
     * @memberof GroupsApiPatchGroup
     */
    readonly id: string

    /**
     * Group patch request body
     * @type {GroupPatchRequestBody}
     * @memberof GroupsApiPatchGroup
     */
    readonly groupPatchRequestBody: GroupPatchRequestBody
}

/**
 * Request parameters for updateGroup operation in GroupsApi.
 * @export
 * @interface GroupsApiUpdateGroupRequest
 */
export interface GroupsApiUpdateGroupRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    readonly orgId: string

    /**
     * ID of group
     * @type {string}
     * @memberof GroupsApiUpdateGroup
     */
    readonly id: string

    /**
     * Group patch request body
     * @type {GroupUpdateRequestBody}
     * @memberof GroupsApiUpdateGroup
     */
    readonly groupUpdateRequestBody: GroupUpdateRequestBody
}

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * This API create new group. <br>   <b>Permission required:</b> <br>       * groups:create <br> 
     * @summary Add a new group
     * @param {GroupsApiAddgroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public addgroup(requestParameters: GroupsApiAddgroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).addgroup(requestParameters.orgId, requestParameters.groupCreationRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API delete group by id. <br>   <b>Permission required:</b> <br>       * groups:delete <br> 
     * @summary Deletes a group
     * @param {GroupsApiDeleteGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(requestParameters: GroupsApiDeleteGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch group by id. <br>   <b>Permission required:</b> <br>       * groups:read <br> 
     * @summary Find group by ID
     * @param {GroupsApiGetGroupByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupById(requestParameters: GroupsApiGetGroupByIdRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupById(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch all groups. <br>   <b>Permission required:</b> <br>       * groups:read_all <br> 
     * @summary Get all groups.
     * @param {GroupsApiGetGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroups(requestParameters: GroupsApiGetGroupsRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroups(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API patch existing group roles and users. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
     * @summary Patch a existing group
     * @param {GroupsApiPatchGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public patchGroup(requestParameters: GroupsApiPatchGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).patchGroup(requestParameters.orgId, requestParameters.id, requestParameters.groupPatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API update existing group. <br>   <b>Permission required:</b> <br>       * groups:update <br> 
     * @summary Update a existing group
     * @param {GroupsApiUpdateGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public updateGroup(requestParameters: GroupsApiUpdateGroupRequest, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).updateGroup(requestParameters.orgId, requestParameters.id, requestParameters.groupUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

