/* tslint:disable */
/* eslint-disable */
/**
 * Cronuseo
 * This is the cronuseo backend APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Policy } from '../types';
// @ts-ignore
import { PolicyCreationRequestBody } from '../types';
// @ts-ignore
import { PolicyEntity } from '../types';
// @ts-ignore
import { PolicyUpdateRequestBody } from '../types';
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API create new policy. <br>   <b>Permission required:</b> <br>       * policies:create <br> 
         * @summary Add a new policy
         * @param {string} orgId ID of organization
         * @param {PolicyCreationRequestBody} policyCreationRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPolicy: async (orgId: string, policyCreationRequestBody: PolicyCreationRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('addPolicy', 'orgId', orgId)
            // verify required parameter 'policyCreationRequestBody' is not null or undefined
            assertParamExists('addPolicy', 'policyCreationRequestBody', policyCreationRequestBody)
            const localVarPath = `/o/{org_id}/policies:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyCreationRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API delete policy by id. <br>   <b>Permission required:</b> <br>       * policies:delete <br> 
         * @summary Deletes a policy
         * @param {string} orgId ID of organization
         * @param {string} id Policy id to policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('deletePolicy', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePolicy', 'id', id)
            const localVarPath = `/o/{org_id}/policies/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch all policies. <br>   <b>Permission required:</b> <br>       * policies:read_all <br> 
         * @summary Get all policies.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (orgId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getPolicies', 'orgId', orgId)
            const localVarPath = `/o/{org_id}/policies:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API fetch policy by id. <br>   <b>Permission required:</b> <br>       * policies:read <br> 
         * @summary Find policy by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of policy to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyById: async (orgId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('getPolicyById', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicyById', 'id', id)
            const localVarPath = `/o/{org_id}/policies/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API update existing policy. <br>   <b>Permission required:</b> <br>       * policies:update <br> 
         * @summary Update a existing policy
         * @param {string} orgId ID of organization
         * @param {string} id ID of policy
         * @param {PolicyUpdateRequestBody} policyUpdateRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPolicy: async (orgId: string, id: string, policyUpdateRequestBody: PolicyUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('patchPolicy', 'orgId', orgId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchPolicy', 'id', id)
            // verify required parameter 'policyUpdateRequestBody' is not null or undefined
            assertParamExists('patchPolicy', 'policyUpdateRequestBody', policyUpdateRequestBody)
            const localVarPath = `/o/{org_id}/policies/{id}:`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * This API create new policy. <br>   <b>Permission required:</b> <br>       * policies:create <br> 
         * @summary Add a new policy
         * @param {string} orgId ID of organization
         * @param {PolicyCreationRequestBody} policyCreationRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPolicy(orgId: string, policyCreationRequestBody: PolicyCreationRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPolicy(orgId, policyCreationRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PoliciesApi.addPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API delete policy by id. <br>   <b>Permission required:</b> <br>       * policies:delete <br> 
         * @summary Deletes a policy
         * @param {string} orgId ID of organization
         * @param {string} id Policy id to policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PoliciesApi.deletePolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch all policies. <br>   <b>Permission required:</b> <br>       * policies:read_all <br> 
         * @summary Get all policies.
         * @param {string} orgId ID of organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(orgId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Policy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicies(orgId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PoliciesApi.getPolicies']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API fetch policy by id. <br>   <b>Permission required:</b> <br>       * policies:read <br> 
         * @summary Find policy by ID
         * @param {string} orgId ID of organization
         * @param {string} id ID of policy to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicyById(orgId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicyById(orgId, id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PoliciesApi.getPolicyById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * This API update existing policy. <br>   <b>Permission required:</b> <br>       * policies:update <br> 
         * @summary Update a existing policy
         * @param {string} orgId ID of organization
         * @param {string} id ID of policy
         * @param {PolicyUpdateRequestBody} policyUpdateRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchPolicy(orgId: string, id: string, policyUpdateRequestBody: PolicyUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchPolicy(orgId, id, policyUpdateRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PoliciesApi.patchPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * This API create new policy. <br>   <b>Permission required:</b> <br>       * policies:create <br> 
         * @summary Add a new policy
         * @param {PoliciesApiAddPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPolicy(requestParameters: PoliciesApiAddPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addPolicy(requestParameters.orgId, requestParameters.policyCreationRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * This API delete policy by id. <br>   <b>Permission required:</b> <br>       * policies:delete <br> 
         * @summary Deletes a policy
         * @param {PoliciesApiDeletePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(requestParameters: PoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePolicy(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch all policies. <br>   <b>Permission required:</b> <br>       * policies:read_all <br> 
         * @summary Get all policies.
         * @param {PoliciesApiGetPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(requestParameters: PoliciesApiGetPoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Policy>> {
            return localVarFp.getPolicies(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * This API fetch policy by id. <br>   <b>Permission required:</b> <br>       * policies:read <br> 
         * @summary Find policy by ID
         * @param {PoliciesApiGetPolicyByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicyById(requestParameters: PoliciesApiGetPolicyByIdRequest, options?: AxiosRequestConfig): AxiosPromise<PolicyEntity> {
            return localVarFp.getPolicyById(requestParameters.orgId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * This API update existing policy. <br>   <b>Permission required:</b> <br>       * policies:update <br> 
         * @summary Update a existing policy
         * @param {PoliciesApiPatchPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchPolicy(requestParameters: PoliciesApiPatchPolicyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchPolicy(requestParameters.orgId, requestParameters.id, requestParameters.policyUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiAddPolicyRequest
 */
export interface PoliciesApiAddPolicyRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof PoliciesApiAddPolicy
     */
    readonly orgId: string

    /**
     * Resource creation request body
     * @type {PolicyCreationRequestBody}
     * @memberof PoliciesApiAddPolicy
     */
    readonly policyCreationRequestBody: PolicyCreationRequestBody
}

/**
 * Request parameters for deletePolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiDeletePolicyRequest
 */
export interface PoliciesApiDeletePolicyRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof PoliciesApiDeletePolicy
     */
    readonly orgId: string

    /**
     * Policy id to policies
     * @type {string}
     * @memberof PoliciesApiDeletePolicy
     */
    readonly id: string
}

/**
 * Request parameters for getPolicies operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPoliciesRequest
 */
export interface PoliciesApiGetPoliciesRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof PoliciesApiGetPolicies
     */
    readonly orgId: string
}

/**
 * Request parameters for getPolicyById operation in PoliciesApi.
 * @export
 * @interface PoliciesApiGetPolicyByIdRequest
 */
export interface PoliciesApiGetPolicyByIdRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof PoliciesApiGetPolicyById
     */
    readonly orgId: string

    /**
     * ID of policy to return
     * @type {string}
     * @memberof PoliciesApiGetPolicyById
     */
    readonly id: string
}

/**
 * Request parameters for patchPolicy operation in PoliciesApi.
 * @export
 * @interface PoliciesApiPatchPolicyRequest
 */
export interface PoliciesApiPatchPolicyRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof PoliciesApiPatchPolicy
     */
    readonly orgId: string

    /**
     * ID of policy
     * @type {string}
     * @memberof PoliciesApiPatchPolicy
     */
    readonly id: string

    /**
     * Resource creation request body
     * @type {PolicyUpdateRequestBody}
     * @memberof PoliciesApiPatchPolicy
     */
    readonly policyUpdateRequestBody: PolicyUpdateRequestBody
}

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * This API create new policy. <br>   <b>Permission required:</b> <br>       * policies:create <br> 
     * @summary Add a new policy
     * @param {PoliciesApiAddPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public addPolicy(requestParameters: PoliciesApiAddPolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).addPolicy(requestParameters.orgId, requestParameters.policyCreationRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API delete policy by id. <br>   <b>Permission required:</b> <br>       * policies:delete <br> 
     * @summary Deletes a policy
     * @param {PoliciesApiDeletePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public deletePolicy(requestParameters: PoliciesApiDeletePolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).deletePolicy(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch all policies. <br>   <b>Permission required:</b> <br>       * policies:read_all <br> 
     * @summary Get all policies.
     * @param {PoliciesApiGetPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicies(requestParameters: PoliciesApiGetPoliciesRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicies(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API fetch policy by id. <br>   <b>Permission required:</b> <br>       * policies:read <br> 
     * @summary Find policy by ID
     * @param {PoliciesApiGetPolicyByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public getPolicyById(requestParameters: PoliciesApiGetPolicyByIdRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).getPolicyById(requestParameters.orgId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API update existing policy. <br>   <b>Permission required:</b> <br>       * policies:update <br> 
     * @summary Update a existing policy
     * @param {PoliciesApiPatchPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public patchPolicy(requestParameters: PoliciesApiPatchPolicyRequest, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).patchPolicy(requestParameters.orgId, requestParameters.id, requestParameters.policyUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

