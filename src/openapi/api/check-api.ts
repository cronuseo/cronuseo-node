/* tslint:disable */
/* eslint-disable */
/**
 * Cronuseo
 * This is the cronuseo backend APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CheckRequestBody } from '../types';
/**
 * CheckApi - axios parameter creator
 * @export
 */
export const CheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API check permission. <br> 
         * @summary Check permission
         * @param {string} orgId ID of organization
         * @param {CheckRequestBody} checkRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check: async (orgId: string, checkRequestBody: CheckRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('check', 'orgId', orgId)
            // verify required parameter 'checkRequestBody' is not null or undefined
            assertParamExists('check', 'checkRequestBody', checkRequestBody)
            const localVarPath = `/o/{org_id}/check`
                .replace(`{${"org_id"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckApi - functional programming interface
 * @export
 */
export const CheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckApiAxiosParamCreator(configuration)
    return {
        /**
         * This API check permission. <br> 
         * @summary Check permission
         * @param {string} orgId ID of organization
         * @param {CheckRequestBody} checkRequestBody Resource creation request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async check(orgId: string, checkRequestBody: CheckRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.check(orgId, checkRequestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CheckApi.check']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CheckApi - factory interface
 * @export
 */
export const CheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckApiFp(configuration)
    return {
        /**
         * This API check permission. <br> 
         * @summary Check permission
         * @param {CheckApiCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        check(requestParameters: CheckApiCheckRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.check(requestParameters.orgId, requestParameters.checkRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for check operation in CheckApi.
 * @export
 * @interface CheckApiCheckRequest
 */
export interface CheckApiCheckRequest {
    /**
     * ID of organization
     * @type {string}
     * @memberof CheckApiCheck
     */
    readonly orgId: string

    /**
     * Resource creation request body
     * @type {CheckRequestBody}
     * @memberof CheckApiCheck
     */
    readonly checkRequestBody: CheckRequestBody
}

/**
 * CheckApi - object-oriented interface
 * @export
 * @class CheckApi
 * @extends {BaseAPI}
 */
export class CheckApi extends BaseAPI {
    /**
     * This API check permission. <br> 
     * @summary Check permission
     * @param {CheckApiCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApi
     */
    public check(requestParameters: CheckApiCheckRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).check(requestParameters.orgId, requestParameters.checkRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}

